name: Deploy

on:
  push:
    branches:
      - main



jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu' # https://github.com/actions/setup-java

      ## gradle caching
      # - name: Gradle Caching
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.gradle/caches
      #       ~/.gradle/wrapper
      #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-
        
      - name: Create application.yaml for CD Deploy
        run: |
          echo "${{ secrets.PRODUCTION_ENV }}" > .env
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      ## gradle build
      - name: Build with Gradle
        run: |
          ls
          ./gradlew clean build -x test

      ## docker build & push to production
      - name: Docker build & push to prod
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.ACTOR }} --password-stdin
          docker buildx create --name arm64builder --use
          docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile -t ghcr.io/${{ secrets.ACTOR }}/spring-backend:latest --push .
          docker logout

          
  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, deploy-spring ]
    steps:
      - name: Deploy to Production (local shell)
        run: |
          cd /home/ec2-user/jobspoon/spring
          docker-compose stop server  # 기존 DB/Redis는 유지
      
          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u imcoder0000 --password-stdin
          docker pull ghcr.io/imcoder0000/spring-backend:latest
          docker image prune -f
          docker logout
      
          docker-compose up -d
